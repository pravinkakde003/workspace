package com.exceptionaire.denso.Activities;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.FragmentTransaction;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.exceptionaire.denso.R;
import com.exceptionaire.denso.Fragments.DescriptionFragment;
import com.exceptionaire.denso.Fragments.VersionsFragment;
import com.exceptionaire.denso.Interface.OnVersionNameSelectionChangeListener;
import com.exceptionaire.denso.Model.Section;
import com.exceptionaire.denso.Model.SubCategories;
import com.exceptionaire.denso.Utils.ActivityCallbackInterface;
import com.exceptionaire.denso.Utils.AppConstant;
import com.exceptionaire.denso.Utils.AppSharedPreference;
import com.exceptionaire.denso.Utils.AppUtils;
import com.exceptionaire.denso.Utils.GetCommonAsyncTask;
import com.exceptionaire.denso.Utils.HorizontalListView;

public class CategoryDetailsActivity extends Activity implements
		OnVersionNameSelectionChangeListener, OnClickListener,
		ActivityCallbackInterface, VersionsFragment.ISendLanguage {
	HorizontalListView mhorizontallistview;
	ImageButton btn_back;
	TextView top_bar_title, footer_bar_title;
	RelativeLayout footer_bar;
	ActivityCallbackInterface callbackInterface;
	String cat_id;
	ArrayList<Section> subcategory_list;
	List<SubCategories> horizontal_list;
	AppSharedPreference prefernce;
	Button btn_language;
	String[] languages = null;
	int selectedradioposition = 0;
	private long mLastClickTime = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.category_details_activity);
		callbackInterface = this;
		prefernce = new AppSharedPreference(CategoryDetailsActivity.this);
		btn_back = (ImageButton) findViewById(R.id.btn_back);
		btn_back.setOnClickListener(this);
		top_bar_title = (TextView) findViewById(R.id.top_bar_title);
		btn_language = (Button) findViewById(R.id.btn_language);
		btn_language.setOnClickListener(this);
		btn_language.setVisibility(View.VISIBLE);
		footer_bar_title = (TextView) findViewById(R.id.footer_bar_title);
		footer_bar_title.setText("Switch To After Market Web");
		footer_bar = (RelativeLayout) findViewById(R.id.footer_bar);
		footer_bar.setOnClickListener(this);

		mhorizontallistview = (HorizontalListView) findViewById(R.id.listview);

		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			top_bar_title.setText(extras.getString("CAT_NAME"));
			cat_id = extras.getString("CAT_ID");
		} else {
			top_bar_title.setText(getResources().getString(R.string.app_name));
		}
		subcategory_list = new ArrayList<Section>();
		horizontal_list = new ArrayList<SubCategories>();
		if (AppUtils.isConnectingToInternet(this)) {
			new GetCommonAsyncTask(CategoryDetailsActivity.this,
					(ActivityCallbackInterface) this).execute("0",
					AppConstant.BASE_URL + AppConstant.GET_SUBCATEGORY + cat_id
							+ "&user_id=" + prefernce.getuser_id());

		} else {
			AppUtils.internet_alertUser(CategoryDetailsActivity.this,
					"Check Internet Connection");
		}

		mhorizontallistview.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				if (AppUtils.isConnectingToInternet(CategoryDetailsActivity.this)) {
					if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
						return;
					}
					mLastClickTime = SystemClock.elapsedRealtime();
					SubCategories notes = horizontal_list.get(position);
					Intent intent = new Intent(CategoryDetailsActivity.this,
							SubCategoryDetailsActivity.class);
					intent.putExtra("SUB_CAT_NAME", top_bar_title.getText()
							+ " : " + notes.getSub_category());
					intent.putExtra("SUB_CAT_ID", notes.getV_sub_cat_id());
					startActivity(intent);
				} else {
					AppUtils.internet_alertUser(CategoryDetailsActivity.this,
							"Check Internet Connection");
				}

			}
		});
		
		
	
		if (section.getLanguage()!=null && section.getLanguage().length>0) {
			btn_language.setVisibility(View.GONE);
		}else {
			btn_language.setVisibility(View.VISIBLE);
		}
		
		

	}

	private BaseAdapter mAdapter = new BaseAdapter() {

		@Override
		public int getCount() {
			return horizontal_list.size();
		}

		@Override
		public Object getItem(int position) {
			return null;
		}

		@Override
		public long getItemId(int position) {
			return 0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View retval = LayoutInflater.from(parent.getContext()).inflate(
					R.layout.horizontal_list_item, null);
			TextView title = (TextView) retval
					.findViewById(R.id.txt_sub_category);
			SubCategories notes = horizontal_list.get(position);
			title.setText(notes.getSub_category());

			return retval;
		}

	};

	@Override
	public void OnSelectionChanged(Section section) {
		DescriptionFragment descriptionFragment = (DescriptionFragment) getFragmentManager()
				.findFragmentById(R.id.description_fragment);

		if (descriptionFragment != null) {
			descriptionFragment.setSection(section);
			selectedradioposition = 0;
		} else {
			selectedradioposition = 0;
			DescriptionFragment newDesriptionFragment = new DescriptionFragment();
			Bundle args = new Bundle();

			args.putParcelable(DescriptionFragment.KEY_POSITION, section);
			newDesriptionFragment.setArguments(args);
			FragmentTransaction fragmentTransaction = getFragmentManager()
					.beginTransaction();
			fragmentTransaction.replace(R.id.fragment_container,
					newDesriptionFragment);
			fragmentTransaction.addToBackStack(null);
			fragmentTransaction.commit();
		}
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_back:
			if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
				return;
			}
			finish();
			break;
		case R.id.footer_bar:
			if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
				return;
			}
			Intent intent = new Intent(CategoryDetailsActivity.this,
					ActivityInformation.class);
			startActivity(intent);
			break;
		case R.id.btn_language:
			if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
				return;
			}
			showDialog();
			break;
		default:
			break;
		}
	}

	private void showDialog() {

		final Section section = (Section) btn_language.getTag();
		languages = section.getLanguage();
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle("Select Your Language");
		builder.setSingleChoiceItems(section.getLanguage(),
				selectedradioposition, new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int item) {
						selectedradioposition = item;
						DescriptionFragment descriptionFragment = (DescriptionFragment) getFragmentManager()
								.findFragmentById(R.id.description_fragment);
						if (descriptionFragment != null) {
							descriptionFragment.setdata(section.getData().get(
									languages[item]));
						} else {
							descriptionFragment = new DescriptionFragment();
							Bundle bundle = new Bundle();
							bundle.putInt("p", item);
							bundle.putParcelable(
									DescriptionFragment.KEY_POSITION, section);
							descriptionFragment.setArguments(bundle);
							getFragmentManager()
									.beginTransaction()
									.add(R.id.fragment_container,
											descriptionFragment).commit();

						}
						dialog.dismiss();
					}
				});
		AlertDialog alert = builder.create();
		alert.show();

	}

	@Override
	public void getResultBack(String result) {
		if (result != null) {
			try {
			
				if (result.equalsIgnoreCase("SocketTimeoutException")
						|| result.equalsIgnoreCase("ConnectTimeoutException")) {
					Toast.makeText(CategoryDetailsActivity.this,
							"Server did not respond", Toast.LENGTH_SHORT).show();
					Intent i = new Intent(getBaseContext(),
							TimeoutActivity.class);
					startActivity(i);
					finish();
				} else {

					JSONObject jobject = new JSONObject(result);
					String status = jobject.getString("Status");
					if (status.equalsIgnoreCase("Success")) {
						
						if (jobject.has("Sections")){
							JSONArray j_array = jobject.getJSONArray("Sections");
							for (int i = 0; i < j_array.length(); i++) {
								JSONObject obj = j_array.getJSONObject(i);
								String section_name = obj.getString("section_name");
								String page_id = obj.getString("page_id");
								String lang_id = obj.getString("lang_id");
								String category = obj.getString("category");

								String sub_category = obj.getString("sub_category");
								String page_data = obj.getString("page_data");
								String page_description = obj
										.getString("page_description");
								String resources_id = obj.getString("resources_id");

								String lang_code = obj.getString("lang_code");
								String v_cat_id = obj.getString("v_cat_id");
								String background_img = obj
										.getString("background_img");

								HashMap<String, String> languageMap = new HashMap<String, String>();

								if (obj.has("versions")) {
									JSONArray versionArray = obj
											.getJSONArray("versions");
									for (int j = 0; j < versionArray.length(); j++) {

										JSONObject vobj = versionArray
												.getJSONObject(j);
										String inner_page_id = vobj
												.getString("page_id");
										String inner_page_description = vobj
												.getString("page_description");
										String language = vobj
												.getString("language");
										languageMap.put(language,
												inner_page_description);
									}
								}
								
								
								

								languageMap.put("English", page_data);

								String[] languages = null;
								if (obj.has("language")) {
									JSONArray versionArray = obj
											.getJSONArray("language");
									languages = new String[versionArray.length()];
									for (int j = 0; j < versionArray.length(); j++) {

										languages[j] = versionArray.getString(j);
									}
								}
								HashMap<String, String> resourceMap = new HashMap<String, String>();

								if (obj.has("resources")) {
									
									JSONArray resourceArray= obj.getJSONArray("resources");
									for (int j = 0; j < resourceArray.length(); j++) {
										JSONObject resourceObject = resourceArray.getJSONObject(j);		
										Log.e("resources_name::: ",resourceObject.getString("resources_name"));
										Log.e("resources_link::: ",resourceObject.getString("resources_link"));
										resourceMap.put(resourceObject.getString("resources_name"), resourceObject.getString("resources_link"));
									}
								}
								
								
								

								subcategory_list.add(new Section(section_name,
										page_data, languages, languageMap));
							}

						}
						
						
						if (jobject.has("Sub_category_list")) {
							JSONArray subCat_array = jobject
									.getJSONArray("Sub_category_list");
							for (int i = 0; i < subCat_array.length(); i++) {
								JSONObject obj = subCat_array.getJSONObject(i);
								String v_sub_cat_id = obj
										.getString("v_sub_cat_id");
								String sub_category = obj
										.getString("sub_category");
								Log.e("v_sub_cat_id::", v_sub_cat_id);
								Log.e("sub_category::", sub_category);
								horizontal_list.add(new SubCategories(
										v_sub_cat_id, sub_category));
							}
						} else {
							Log.e("", "No valuse-Sub_category_list");
							mhorizontallistview.setVisibility(View.GONE);
						}
						
						
						
						
						
						
						

						mhorizontallistview.setAdapter(mAdapter);

						VersionsFragment versionsFragment = (VersionsFragment) getFragmentManager()
								.findFragmentById(R.id.names_fragment);

						if (versionsFragment != null) {
							versionsFragment.getNewData(subcategory_list);
						} else {

							versionsFragment = new VersionsFragment();
							Bundle bundle = new Bundle();
							bundle.putParcelableArrayList("SubCatList",
									subcategory_list);
							versionsFragment.setArguments(bundle);
							getFragmentManager()
									.beginTransaction()
									.add(R.id.fragment_container,
											versionsFragment).commit();

						}

					} else if (status.equalsIgnoreCase("Failed")) {
						String msg = jobject.getString("msg");
						Toast.makeText(CategoryDetailsActivity.this, msg,
								Toast.LENGTH_SHORT).show();
						finish();
					} else {
						Toast.makeText(CategoryDetailsActivity.this,
								"Network Congestion", Toast.LENGTH_SHORT)
								.show();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	@Override
	public void SendLanguageData(Section section) {

		if (btn_language != null) {

			btn_language.setTag(section);
		}
	}
}
